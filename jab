#!/bin/sh
function checkEfi() {
    ls /sys/firmware/efi/efivars 1>/dev/null 2>&1
    echo $?
}

# Check internet connection
function checkInternet() {
    ping google.com -c 1 1>/dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo 'true'
    else
        echo 'false'
    fi
}

# Create partitions
function formatEfi() {
    partNum=1
    echo "Formatting $jab_drive"

    previousSwap=$(swapon -s | awk -F' ' '/\/dev/ {print $1}')
    if [ -n $previousSwap ]; then
        swapoff $previousSwap 1>/dev/null 2>1&
    fi

    sfdisk --delete $jab_drive 1>/dev/null 2>&1
    wipefs --all $jab_drive 1>/dev/null 2>&1
    # Create boot partition
    echo "    Creating boot partition"
    echo ',512M,U' | sfdisk $jab_drive -X gpt 1>/dev/null 2>&1
    yes | mkfs.fat -F32 -n BOOT $jab_drive"1" 1>/dev/null 2>&1
    ((partNum=partNum+1))

    # Check and create swap partition
    if [ "$jab_swap" = 'true' ]; then
        echo "    Creating swap partition"
        echo ", $jab_swap_s, S" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        mkswap -L SWAP $jab_drive"2" 1>/dev/null 2>&1
        ((partNum=partNum+1))
    fi

    # Check and create root partition
    if [ "$jab_home_part" = 'true' ]; then
        echo "    Creating root partition"
        echo ",$jab_root_s,L" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        yes | mkfs.ext4 -L ROOT "$jab_drive$partNum" 1>/dev/null 2>&1
        ((partNum=partNum+1))


        echo "    Creating home partition"
        echo ",,L" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        yes | mkfs.ext4 -L HOME "$jab_drive$partNum" 1>/dev/null 2>&1
        homePart=$jab_drive$partNum

    else
        echo "    Creating root partition"
        echo ",,L" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        yes | mkfs.ext4 -L ROOT "$jab_drive$partNum" 1>/dev/null 2>&1
        homePart=$jab_drive$partNum
    fi

    # Create all directories and mount the partitions
    mountPartitions
}

# This needs to be a script of it's own
function chrootConfig() {
    cp jab.conf /mnt
    cp jab.pkgs /mnt
    cp jab-chroot.sh /mnt
    
    if [[ -f $jab_post_chroot_script_file ]]; then
        cp $jab_post_chroot_script_file /mnt
    fi

    echo "Executing arch-chroot"
    arch-chroot /mnt $jab_shell jab-chroot.sh && rm /mnt/jab.conf /mnt/jab-chroot.sh /mnt/jab.pkgs

}

function formatBios() {
    # TODO: Gather enough motivation to actually do this
    echo "BIOS implementation not completed yet"
}

function mountPartitions() {
    echo "Mounting partitions"
    echo "    Mounting root"
    mount /dev/disk/by-label/ROOT /mnt

    echo "    Mounting boot"
    [ -d /mnt/boot ] || mkdir /mnt/boot 1>/dev/null 2>&1
    mount /dev/disk/by-label/BOOT /mnt/boot

    if [ $jab_swap -eq 0 ]; then
        echo "    Turning swap on"
        swapon /dev/disk/by-label/SWAP 1>/dev/null 2>&1
    fi

    if [ $jab_home_part -eq 0 ]; then
        echo "    Mounting home"
        mkdir /mnt/home
        mount /dev/disk/by-label/HOME /mnt/home
    fi
}

function updateMirrors() {
    echo "Setting mirrors. This might take a couple of minutes..."
    reflector --latest 10 --sort rate --save /etc/pacman.d/mirrorlist
}

function installArch() {
    echo "Installing base system"
    pacstrap /mnt base base-devel linux linux-firmware git neovim go $jab_shell
    if [ ! $? ]; then
        echo "Error during pacstrap..."
        exit 5
    fi
    
    sed -ei '/\[options\]/a Color\nILoveCandy' /mnt/etc/pacman.conf

    echo "    Generating fstab"
    genfstab -U /mnt >> /mnt/etc/fstab

    echo "    Setting mirrorlist"
    cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
}


if [ -f './jab.conf' ]; then source ./jab.conf; fi

[ -z $jab_drive ] && export jab_drive="/dev/sda"
[ -z $jab_swap ] && export jab_swap=0
[ -z $jab_swap_s ] && export jab_swap_s=4G
[ -z $jab_home_part ] && export jab_home_part=1
[ -z $jab_root_s ] && export jab_root_s=40G
[ -z $jab_efi ] && export jab_efi=$(checkEfi)
[ -z $jab_online ] && export jab_online=$(checkInternet)

[ -z "$jab_locale" ] && export jab_locale="en_GB.UTF-8 UTF-8\nfi_FI.UTF-8 UTF-8"
[ -z "$jab_lang" ] && export jab_lang="en_GB.UTF-8 UTF-8"
[ -z $jab_tz ] && export jab_tz="Europe/Helsinki"
[ -z $jab_keyboard ] && export jab_keyboard="fi"
[ -z $jab_hostname ] && export jab_hostname="arch"
[ -z $jab_username ] && export jab_username="archer"
[ -z $jab_password ] && export jab_password="toor"
[ -z $jab_shell ] && export jab_shell="zsh"


echo "Checking for internet connection..."
if [ "$jab_online" = 'true' ]; then
    echo "Couldn't connect to network. Maybe try again in a spiff?"
    exit 1
fi

if [ "$jab_efi" = 'true' ]; then
    formatEfi
else
    formatBios
    exit 2
fi

updateMirrors
if [ ! $? ]; then
    echo "Error updating mirrors"
    exit 6
fi

installArch
if [ ! $? ]; then
    echo "Error during pacstarp"
    exit 7
fi

chrootConfig
if [ ! $? ]; then
    echo "Error during chroot"
    exit 8
fi
