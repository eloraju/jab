#!/bin/sh
function checkEfi() {
    ls /sys/firmware/efi/efivars 1>/dev/null 2>&1
    echo $?
}

# Check internet connection
function checkInternet() {
    ping google.com -c 1 1>/dev/null 2>&1

    if [ $? ]; then
        echo "Couldn't connect to network. Maybe try again in a spiff?"
        echo 1
    fi

    echo 0
}

# Create partitions
function formatEfi() {
    partNum=1
    echo "    Formatting $jab_drive"

    previousSwap=$(swapon -s | awk -F' ' '/\/dev/ {print $1}')
    if [ -n $previousSwap ]; then
        swapoff $previousSwap
    fi

    wipefs $jab_drive
    #sfdisk --delete $jab_drive 1>/dev/null 2>&1
    # Create boot partition
    echo "    Creating boot partition"
    echo ',512M,U' | sfdisk $jab_drive -w always -X gpt 1>/dev/null 2>&1
    mkfs.fat -F32 -n BOOT /dev/sda1 1>/dev/null 2>&1
    ((partNum=partNum+1))

    # Check and create swap partition
    if [ $jab_swap -eq 0 ]; then
        echo "    Creating swap partition"
        echo ", $jab_swap_s, S" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        mkswap -L SWAP $jab_drive"2" 1>/dev/null 2>&1
        ((partNum=partNum+1))
    fi

    # Check and create root partition
    if [ $jab_home_part -eq 0 ]; then
        echo "    Creating root partition"
        echo ",$jab_root_s,L" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        mkfs.ext4 -L ROOT -F "$jab_drive$partNum" 1>/dev/null 2>&1
        ((partNum=partNum+1))

        echo "    Creating home partition"
        echo ",,L" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        mkfs.ext4 -L HOME -F "$jab_drive$partNum" 1>/dev/null 2>&1
        homePart=$jab_drive$partNum

    else
        echo "    Creating root partition"
        echo ",,L" | sfdisk $jab_drive -a 1>/dev/null 2>&1
        mkfs.ext4 -L ROOT -F "$jab_drive$partNum" 1>/dev/null 2>&1
        homePart=$jab_drive$partNum
    fi


    # Create all directories and mount the partitions
    mountPartitions
}

function formatBios() {
    # TODO: Gather enough motivation to actually do this
    echo "BIOS implementation not completed yet"
}

function updateMirrors() {
    echo "Installing helper tools"
    pacman -Syq reflector --noconfirm 1>/dev/null 2>&1
    echo "    Setting mirrors. This might take a couple of minutes..."
    reflector --latest 10 --sort rate --save /etc/pacman.d/mirrorlist
    echo "    Mirros ready"
}

function mountPartitions() {
    sleep 1
    echo "Mounting partitions"
    echo "    Mounting root"
    mount /dev/disk/by-label/ROOT /mnt

    echo "    Mounting boot"
    mkdir /mnt/boot
    mount /dev/disk/by-label/BOOT /mnt/boot

    if [ $jab_swap ]; then
        echo "    Turning swap on"
        swapon /dev/disk/by-label/SWAP 1>/dev/null 2>&1
    fi

    if [ $jab_home_part ]; then
        echo "    Mounting home"
        mkdir /mnt/home
        mount /dev/disk/by-label/HOME /mnt/home
    fi
}

function installArch() {
    echo 'Here we need the packages'
}

function main() {
    #loadkeys fi
    #timedatectl set-ntp true
    
    if [[ -f $1 ]]; then source $1; fi
    
    [ -z $jab_drive ] && export jab_drive="/dev/sda"
    [ -z $jab_swap ] && export jab_swap=0
    [ -z $jab_swap_s ] && export jab_swap_s=4G
    [ -z $jab_home_part ] && export jab_home_part=1
    [ -z $jab_root_s ] && export jab_root_s=40G
    [ -z $jab_efi ] && export jab_efi=$(checkEfi)
    [ -z $jab_online ] && export jab_online=$(checkInternet)
    [ -z $jab_version ] && export jab_version="arch"

    echo "Checking for internet connection..."
    if [[ ! jab_online ]]; then
        echo "No internet connection. Aborting."
        exit 1
    fi

    echo "Partitioning drive"
    formatEfi
    #if [[ $jab_efi -eq 0 ]]; then
    #    formatEfi
    #else
    #    formatBios
    #    exit 2
    #fi

    #updateMirrors

    if [[ $jab_version == "arch" ]]; then
        installArch
    elif [[ $jab_version == "artix" ]]; then
        echo "Not implemented"
    fi
}

main $@
